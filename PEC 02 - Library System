import 'dart:developer';
import 'dart:io';

class Library with searchIndex, mainMenuProcesses{
  
  var allBooks, lentBooks, bookList=[], userList=[];
  
  List<String> genre=[
    "Computer Science",
    "Philosophy",
    "Pure Science",
    "Art and Recreation",
    "History"
    ];
  
  Library(){
    lentBooks=0;
    allBooks=0;
  }
  //For each instance of Library, it sets the lent books and the no. of books to 0.

   int numOfLent(){
    return lentBooks;
  }
  //return number of lent out books
  
  int numOfBooks(){
    return allBooks;
  }
  //Return the total number of volumes in the library's possession, including those that were lent out.
  
  
  void addBook(String title, String author, String genre, String ISBN){
    
    var book=new Books(
      title, author, genre, ISBN
       );
    bookList.add(book);
    allBooks++;
  }
  //add book to the collection
  //This method was used instead of explicitly establishing a new books object in main to ensure that a new books object would be created only if a Library object already existed.

  
  
  void lendBook(int userIndex){   
    //lending a book to the user
 
    for(var doAddBook='1';doAddBook!='2';){
      //The loop will continue until the user picks the option to complete adding.

      stdout.write("\n(1)Add book ISBN\n(2)Finish adding\nType choice:");
      doAddBook=stdin.readLineSync()!;

      if(doAddBook=='1'){
        //The loop will continue until the user inputs correct ISBN
        for(int bookIndex=-1;bookIndex==-1;){
          stdout.write("\n Enter the book ISBN: ");
          String ISBNbyUser=stdin.readLineSync()!;
          bookIndex=findBookIndex(bookList, ISBNbyUser);

          
          if(bookIndex==-1){
            print("Book is not found. Please enter the ISBN again.");
           //ISBN does not match any record in the library's books collection
          
          else if(bookList[bookIndex].status==0){
            print("Book is currently borrowed by another user.");
          
          else{
            //The book is added to the user's borrowed books list
            //The status of the book in the library is changed to unavailable
            //Library's count of lent books increments
            userList[userIndex].borrowedBooks.add(bookList[bookIndex]);
            bookList[bookIndex].status=0;
            lentBooks++;
            }
           }
          }
        }
      }
      else if(doAddBook=='2')
        print("\nBooks added to borrow list.\n");
      else
        print("Invalid choice. Please try again.");
    }
  }

  void acceptReturn(int userIndex){
    print("\n Returned books: ");
    if(userList[userIndex].borrowedBooks.length!=0){
      for(int i=0;i<userList[userIndex].borrowedBooks.length;){
        int bookIndex=findBookIndex(bookList, userList[userIndex].borrowedBooks[i].ISBN);
        userList[userIndex].borrowedBooks.removeAt(0);
        bookList[bookIndex].status=1;
        lentBooks--;
        print("\t${bookList[bookIndex].title} by ${bookList[bookIndex].author}");
      }
    }
    else
      print("\nNo borrowed books in your record.");
  }
  //library accepts returned books from user
  //all books in user's borrow list will be returned
  
  
  void newUser(String fullName, String address){
    var user=new User(fullName, address);
    userList.add(user);
  }
}
//adding new user
//This method is used instead of creating an object in the main function to ensure that a new User object is produced only if a Library object already exists.


//Class for books containing necessary attributes
class Books{
  late String title;
  late String author;
  late String genre;
  late String ISBN;
  late int status; //0=borrowed, 1=available
  var booksBorrowed=[];

  //constructor to set values of attributes for every book instance
  Books(title, author, genre, ISBN){
    this.title=title;
    this.author=author;
    this.genre=genre;
    this.ISBN=ISBN;
    status=1; //status is immediately given value of 1 since it is available once added to collection
  }
}

class User{
  late String fullName;
  late String address;
  var borrowedBooks=[];
  User(String fullName, String address){
    this.fullName=fullName;
    this.address=address;
  }
}
//class for users containing necessary attributes



//mixin for index searching algorithms for books and users
mixin searchIndex{
  //method for finding certain book's index in library's users list
  //book is searched based on matching ISBN
  int findBookIndex(var listOfBooks, String ISBN){
    for(int i=0;i<listOfBooks.length;i++){
      if(listOfBooks[i].ISBN==ISBN)
        return i;
    }
    return -1;
  }

  //method for finding certain user's index in library's users list
  //user is searched based on matching full name and address
  int findUserIndex(var listOfUsers, String fullName, String address){
    for(int i=0;i<listOfUsers.length;i++){
      if(listOfUsers[i].fullName==fullName && listOfUsers[i].address==address)
        return i;
    }
    return -1;
  }
}

//mixin for processing of library's main menu
//chose to use mixin than defining these methods in the Library class for read
